<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>N皇后51</title>
    <link href="/2024/06/13/N%E7%9A%87%E5%90%8E51/"/>
    <url>/2024/06/13/N%E7%9A%87%E5%90%8E51/</url>
    
    <content type="html"><![CDATA[<h2 id="n皇后"><a href="https://leetcode.cn/problems/n-queens/">N皇后</a></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    List&lt;List&lt;String&gt;&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="hljs-title function_">solveNQueens</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-comment">// 每一行</span><br>        List&lt;String&gt; board = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>                sb.append(<span class="hljs-string">&quot;.&quot;</span>);<br>            &#125;<br>            board.add(sb.toString());<br>        &#125;<br><br>        backtrack(board, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-comment">// 第row行放置皇后的位置</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">backtrack</span><span class="hljs-params">(List&lt;String&gt; board, <span class="hljs-type">int</span> row)</span> &#123;<br>        <span class="hljs-comment">// 回溯完了，返回一种结果</span><br>        <span class="hljs-keyword">if</span> (row == board.size()) &#123;<br>            res.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(board));<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 尝试放在不同列</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">cel</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; cel &lt; board.size(); cel++) &#123;<br>            <span class="hljs-keyword">if</span> (!isValid(board, row, cel)) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 选择放置在第row行第cell列</span><br>            board.set(row, board.get(row).substring(<span class="hljs-number">0</span>, cel) + <span class="hljs-string">&#x27;Q&#x27;</span> + board.get(row).substring(cel + <span class="hljs-number">1</span>));<br>            backtrack(board, row + <span class="hljs-number">1</span>);<br>            <span class="hljs-comment">// 撤销选择</span><br>            board.set(row, board.get(row).substring(<span class="hljs-number">0</span>, cel) + <span class="hljs-string">&#x27;.&#x27;</span> + board.get(row).substring(cel + <span class="hljs-number">1</span>));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 一共8种情况只需要考虑三种</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isValid</span><span class="hljs-params">(List&lt;String&gt; board, <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> cel)</span> &#123;<br>        <span class="hljs-comment">// 同一列是否存在皇后</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> row - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-keyword">if</span> (board.get(i).charAt(cel) == <span class="hljs-string">&#x27;Q&#x27;</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 左上角是否存在皇后</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> row - <span class="hljs-number">1</span>, j = cel - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span> &amp;&amp; j &gt;= <span class="hljs-number">0</span>; i--, j--) &#123;<br>            <span class="hljs-keyword">if</span> (board.get(i).charAt(j) == <span class="hljs-string">&#x27;Q&#x27;</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 右上角是否存在皇后</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> row - <span class="hljs-number">1</span>, j = cel + <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span> &amp;&amp; j &lt; board.size(); i--, j++) &#123;<br>            <span class="hljs-keyword">if</span> (board.get(i).charAt(j) == <span class="hljs-string">&#x27;Q&#x27;</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>性能提升版本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 正对角线上row和cel相等，所以判断在不在正对角线上需要用row-cel，可能出现负值，所以加上n，取值范围变成了[-n, n]反对角线上row+cel==n,取值范围[0, 2n]</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    List&lt;List&lt;String&gt;&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <br>    <span class="hljs-keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="hljs-title function_">solveNQueens</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-comment">// 记录同一列有没有皇后</span><br>        <span class="hljs-type">boolean</span>[] cols = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[n];<br>        <span class="hljs-comment">// 记录正对角线（左上到右下）有没有皇后</span><br>        <span class="hljs-type">boolean</span>[] diag1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[<span class="hljs-number">2</span> * n];<br>        <span class="hljs-comment">// 记录反对角线有没有皇后</span><br>        <span class="hljs-type">boolean</span>[] diag2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[<span class="hljs-number">2</span> * n];<br>        <span class="hljs-type">char</span>[][] board = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[n][n];<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>                board[i][j] = <span class="hljs-string">&#x27;.&#x27;</span>;<br>            &#125;<br>        &#125;<br><br>        backtrack(board, <span class="hljs-number">0</span>, cols, diag1, diag2);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">backtrack</span><span class="hljs-params">(<span class="hljs-type">char</span>[][] board, <span class="hljs-type">int</span> row, <span class="hljs-type">boolean</span>[] cols, <span class="hljs-type">boolean</span>[] diag1, <span class="hljs-type">boolean</span>[] diag2)</span> &#123;<br>        <span class="hljs-keyword">if</span> (row == board.length) &#123;<br>            res.add(construct(board));<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">col</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; col &lt; board.length; col++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> row - col + board.length;  <span class="hljs-comment">// 转换成正数</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">d2</span> <span class="hljs-operator">=</span> row + col;<br>            <span class="hljs-keyword">if</span> (cols[col] || diag1[d1] || diag2[d2]) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            board[row][col] = <span class="hljs-string">&#x27;Q&#x27;</span>;<br>            cols[col] = <span class="hljs-literal">true</span>;<br>            diag1[d1] = <span class="hljs-literal">true</span>;<br>            diag2[d2] = <span class="hljs-literal">true</span>;<br><br>            backtrack(board, row + <span class="hljs-number">1</span>, cols, diag1, diag2);<br><br>            board[row][col] = <span class="hljs-string">&#x27;.&#x27;</span>;<br>            cols[col] = <span class="hljs-literal">false</span>;<br>            diag1[d1] = <span class="hljs-literal">false</span>;<br>            diag2[d2] = <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> List&lt;String&gt; <span class="hljs-title function_">construct</span><span class="hljs-params">(<span class="hljs-type">char</span>[][] board)</span> &#123;<br>        List&lt;String&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; board.length; i++) &#123;<br>            res.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(board[i]));<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>全排列46</title>
    <link href="/2024/06/12/%E5%85%A8%E6%8E%92%E5%88%9746/%E5%85%A8%E6%8E%92%E5%88%9746/"/>
    <url>/2024/06/12/%E5%85%A8%E6%8E%92%E5%88%9746/%E5%85%A8%E6%8E%92%E5%88%9746/</url>
    
    <content type="html"><![CDATA[<h2 id="全排列">全排列</h2><p>画出决策树 <img src="/.com//image.png" alt="alt text">把路径和选择列表作为节点的属性 <img src="/.com//image-1.png" alt="alt text"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    List&lt;List&lt;Integer&gt;&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">permute</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-comment">// 选择列表</span><br>        List&lt;Integer&gt; track = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-comment">// 判断数组中的元素是否在选择列表中（剪枝用）</span><br>        <span class="hljs-type">boolean</span>[] used = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[nums.length];<br>        backtrack(nums, track, used);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">backtrack</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, List&lt;Integer&gt; track, <span class="hljs-type">boolean</span>[] used)</span>  &#123;<br>        <span class="hljs-comment">// 路径长度等于数组长度则是一种排列</span><br>        <span class="hljs-keyword">if</span> (track.size() == nums.length) &#123;<br>            res.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(track));<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-comment">// 已经在选择列表中，剪枝</span><br>            <span class="hljs-keyword">if</span> (used[i]) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-comment">// 做选择</span><br>            used[i] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-comment">// 加入路径</span><br>            track.add(nums[i]);<br>            backtrack(nums, track, used);<br>            <span class="hljs-comment">// 撤销选择</span><br>            used[i] = <span class="hljs-literal">false</span>;<br>            <span class="hljs-comment">// 移出路径</span><br>            track.remove(track.size() - <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/06/11/931%E4%B8%8B%E9%99%8D%E8%B7%AF%E5%BE%84%E6%9C%80%E5%B0%8F%E5%92%8C/"/>
    <url>/2024/06/11/931%E4%B8%8B%E9%99%8D%E8%B7%AF%E5%BE%84%E6%9C%80%E5%B0%8F%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<table><tbody><tr class="odd"><td>title： 下降路径最小和931</td></tr><tr class="even"><td>date： 2024-05-20</td></tr><tr class="odd"><td>tags：</td></tr><tr class="even"><td>- 数据结构</td></tr><tr class="odd"><td>categories：</td></tr><tr class="even"><td>- 数据结构</td></tr></tbody></table><p><a href="https://leetcode.cn/problems/minimum-falling-path-sum/description/">下降路径最小和</a></p><p><strong>状态转移方程定义</strong> 定义一个dp函数表示dp(matrix, i,j)表示从第0行任意一列移动到第i行第j列的最小路径和。 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">minFallingPathSum</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] matrix)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> Integer.MAX_VALUE;<br>        <span class="hljs-comment">// 可以从第一行的任意一列出发</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; matrix[<span class="hljs-number">0</span>].length; i++) &#123;<br>            min = Math.min(min, dp(matrix, matrix.length - <span class="hljs-number">1</span>, i));<br>        &#125;<br>        <span class="hljs-keyword">return</span> min;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">dp</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] matrix, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>        <span class="hljs-comment">// 上一个节点的位置放置数组越界，给出一个大于可能值的值，让他在getMin的时候被过滤掉</span><br>        <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">0</span> || j &lt; <span class="hljs-number">0</span> || i &gt;= matrix.length || j &gt;= matrix[<span class="hljs-number">0</span>].length ) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">99999</span>;<br>        &#125;<br>        <span class="hljs-comment">// base case</span><br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> matrix[i][j];<br>        &#125;<br><br>        <span class="hljs-comment">// 灵魂所在，第0行任意一列移动到第i行第j列的最小路径和等于第i-1行中能到达第i行j列的最小值加上matrix[i][j]</span><br>        <span class="hljs-keyword">return</span> getMin(dp(matrix, i - <span class="hljs-number">1</span>, j), dp(matrix, i - <span class="hljs-number">1</span>, j + <span class="hljs-number">1</span>), dp(matrix, i - <span class="hljs-number">1</span>, j - <span class="hljs-number">1</span>)) + matrix[i][j];<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMin</span><span class="hljs-params">(<span class="hljs-type">int</span> left, <span class="hljs-type">int</span> down, <span class="hljs-type">int</span> right)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> Math.min(left, down);<br>        <span class="hljs-keyword">return</span> Math.min(min, right);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>上面的代码，因为存在过多的重复计算，可以使用备忘录来进行剪枝</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-type">int</span> memo[][];<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">minFallingPathSum</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] matrix)</span> &#123;<br>        memo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[matrix.length][matrix[<span class="hljs-number">0</span>].length];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; matrix.length; i++) &#123;<br>            Arrays.fill(memo[i], <span class="hljs-number">666666</span>);<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> Integer.MAX_VALUE;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; matrix[<span class="hljs-number">0</span>].length; i++) &#123;<br>            min = Math.min(min, dp(matrix, matrix.length - <span class="hljs-number">1</span>, i));<br>        &#125;<br>        <span class="hljs-keyword">return</span> min;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">dp</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] matrix, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>        <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">0</span> || j &lt; <span class="hljs-number">0</span> || i &gt;= matrix.length || j &gt;= matrix[<span class="hljs-number">0</span>].length ) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">99999</span>;<br>        &#125;<br><br>         <span class="hljs-keyword">if</span> (memo[i][j] != <span class="hljs-number">666666</span>) &#123;<br>            <span class="hljs-keyword">return</span> memo[i][j];<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> matrix[i][j];<br>        &#125;<br><br>        memo[i][j] = getMin(dp(matrix, i - <span class="hljs-number">1</span>, j), dp(matrix, i - <span class="hljs-number">1</span>, j + <span class="hljs-number">1</span>), dp(matrix, i - <span class="hljs-number">1</span>, j - <span class="hljs-number">1</span>)) + matrix[i][j];<br>        <span class="hljs-keyword">return</span> memo[i][j];<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMin</span><span class="hljs-params">(<span class="hljs-type">int</span> left, <span class="hljs-type">int</span> down, <span class="hljs-type">int</span> right)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> Math.min(left, down);<br>        <span class="hljs-keyword">return</span> Math.min(min, right);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/05/18/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    <url>/2024/05/18/%E5%89%8D%E7%BC%80%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<table><tbody><tr class="odd"><td>title： 前缀和</td></tr><tr class="even"><td>date： 2024-05-20</td></tr><tr class="odd"><td>tags：</td></tr><tr class="even"><td>- 数据结构</td></tr><tr class="odd"><td>categories：</td></tr><tr class="even"><td>- 数据结构</td></tr></tbody></table><h2 id="前缀和">前缀和</h2><h3 id="什么是前缀和">什么是前缀和</h3><p>前缀和是一种重要的预处理方法，能够极大降低查询的时间复杂度。它的基本思想是将一个数组的各个部分的和预先求出，保存在另一个数组中。</p><h4 id="case">case</h4><p>具体来说，假设我们有一个数组<span class="math inline">\(arr\)</span>，那么前缀和数组prefixSum将会被定义为：<span class="math inline">\(prefixSum[i] = arr[0] + arr[1] + arr[2] + ... +arr[i]\)</span>。也就是说，前缀和数组的每个元素，都是原数组中从第0个元素加到当前位置的元素之和。例如，如果原数组为<span class="math inline">\([1, 2, 3, 4,5]\)</span>，对应的前缀和数组就是<span class="math inline">\([1, 3, 6,10, 15]\)</span>。</p><p><strong>构造前缀和数组公式</strong> <span class="math display">\[\begin{equation}\text{prefixSum}[i] = \sum_{j=0}^{i} \text{arr}[j]\tag{1.1}\end{equation}\]</span></p><p><strong>求l到r区间和公式</strong> <span class="math display">\[\begin{equation}\sum_{l,r} =\begin{cases}\text{prefixSum}[r], &amp; \text{if } l = 0 \ \text{and} \ r = 0, \\\text{prefixSum}[r] - \text{prefixSum}[l - 1], &amp; \text{if } 0 &lt; l\leq r.\end{cases}\tag{1.2}\end{equation}\]</span></p><h4 id="优势">优势</h4><p>前缀和的主要作用是用于处理数组中不改变原数组的情况下区间和的问题，即快速求出数组中某个区间内的所有数之和。利用前缀和，我们可以将这个问题的时间复杂度从<span class="math inline">\(O(n)\)</span>降低到<span class="math inline">\(O(1)\)</span>。具体做法是：假设我们要求<span class="math inline">\([l,r]\)</span>区间的和，那么只需要一次减法运算：<span class="math inline">\(prefixSum[r] - prefixSum[l - 1]\)</span> 其中<span class="math inline">\((l &gt; 0)\)</span>就可以得到结果。如果<span class="math inline">\(l = 0\)</span>，则区间和就是<span class="math inline">\(prefixSum[r]\)</span>。</p><h4 id="优化思路">优化思路</h4><p>不考虑边界情况,如果原数组为<span class="math inline">\([1, 2, 3, 4,5]\)</span>，对应的前缀和数组就是<span class="math inline">\([0, 1, 3,6, 10, 15]\)</span>。对应公式为： <span class="math display">\[\begin{equation}\text{prefixSum}[i] = \sum_{j=0}^{i} \text{arr}[j]\tag{2.1}\end{equation}\]</span></p><p><span class="math display">\[\begin{equation}\sum_{l, r} = \text{prefixSum}[r + 1] - \text{prefixSum}[l], \text{ for} 0 &lt; l \leq r.\tag{2.2}\end{equation}\]</span></p><h3 id="实战">实战</h3><p><a href="https://leetcode.cn/problems/range-sum-query-immutable/description/">区域和</a></p><p><a href="https://leetcode.cn/problems/range-sum-query-2d-immutable">二维区域和</a></p><p><a href="https://labuladong.online/algo/data-structure/prefix-sum/#%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E5%89%8D%E7%BC%80%E5%92%8C">题解</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/05/18/%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84/"/>
    <url>/2024/05/18/%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h2 id="差分数组">差分数组</h2><h3 id="什么是差分数组">什么是差分数组</h3><p>差分数组是一种有效记录数组连续部分和变化的数据结构。 对于给定的数组<span class="math inline">\(a[0], a[1], ... ,a[n]\)</span>，我们定义差分数组 <span class="math inline">\(diff\)</span> 为 <span class="math inline">\(diff[i] = a[i] - a[i - 1]\)</span>，其中 <span class="math inline">\(i\)</span> 从<span class="math inline">\(1\)</span> 至 <span class="math inline">\(n\)</span>，特殊地，<span class="math inline">\(diff[0] = a[0]\)</span>。</p><p>例如，给定数组 <span class="math inline">\([1, 2, 4, 7,8]\)</span>，它的差分数组就是 <span class="math inline">\([1, 1, 2, 3,1]\)</span></p><h3 id="应用">应用</h3><p>差分数组还有很多其他的应用，例如在处理一些区间修改的问题上，比如线段树，树状数组等，差分思想相比于它们来说更加直观，实现起来也更简单。</p><h3 id="case">case</h3><p>当我们要对原数组的一个连续的区间 <span class="math inline">\([l,r]\)</span> 内的所有元素进行加法或者减法操作时，只需要对对应的差分数组<span class="math inline">\([l, r]\)</span>做三次操作，而不需要遍历整个区间。步骤如下：<br>1. 如果我们需要对区间 <span class="math inline">\([l, r]\)</span>的元素全部加上 <span class="math inline">\(k\)</span>，<span class="math inline">\(diff[l] += k\)</span><br>2. 如果<span class="math inline">\(r + 1 &lt; n + 1\)</span> 则 <span class="math inline">\(diff[r + 1] -= k\)</span> 。<br>3. 然后，获取更新后的原数组，可以通过 <span class="math inline">\(diff\)</span> 数组的前缀和恢复出 <span class="math inline">\(m\)</span> 数组。公式是 <span class="math inline">\(a[i] = diff[1] + diff[2] + ... + diff[i]\)</span>，其中 <span class="math inline">\(1 &lt;= i &lt;= n\)</span>，<span class="math inline">\(a[0] = diff[0]\)</span>。</p><h3 id="公式">公式</h3><h4 id="构造diff">构造diff</h4><p><span class="math display">\[\begin{align*}\text{diff}[i] =    \begin{cases}        a[0], &amp; \quad i=0 \\        \text{diff}[i] = a[i] - a[i - 1], &amp; \quad 0 &lt; i &lt;\text{a.length}    \end{cases}\tag{1.1}\end{align*}\]</span></p><h4 id="区间l到r增加k">区间l到r增加k</h4><p><span class="math display">\[\begin{align*}  \text{diff}[l] &amp; += k, \quad  0 \leq k &lt; \text{diff.length} \\  \text{diff}[r + 1] &amp; -= k, \quad \text{if}\quad r + 1 &lt;\text{diff.length}\tag{1.2}  \end{align*}\]</span></p><h4 id="还原diff">还原diff</h4><p><span class="math display">\[\begin{equation}a[i] =\begin{cases}    0, &amp; \text{if}\ \ i = 0,\ \\    a[i - 1] + diff[i], \  \ &amp;\text{for}\ 1 \leq i \leq n\end{cases}\tag{1.3}\end{equation}\]</span></p><h3 id="模板">模板</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Difference</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span>[] diff;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Difference</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        diff = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[nums.length];<br><br>        diff[<span class="hljs-number">0</span>] = nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; nums.length; i++) &#123;<br>            diff[i] = nums[i] - nums[i - <span class="hljs-number">1</span>];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">increment</span><span class="hljs-params">(<span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right, <span class="hljs-type">int</span> val)</span> &#123;<br>        diff[left] += val;<br>        <span class="hljs-keyword">if</span> (right + <span class="hljs-number">1</span> &lt; diff.length) &#123;<br>            diff[right + <span class="hljs-number">1</span>] -= val;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] getRes() &#123;<br>        <span class="hljs-type">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[diff.length];<br>        res[<span class="hljs-number">0</span>] = diff[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; diff.length; i++) &#123;<br>            res[i] = res[i - <span class="hljs-number">1</span>] + diff[i];<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="实战">实战</h3><p><a href="https://leetcode.cn/problems/corporate-flight-bookings/description/">航班预定</a></p><p><a href="https://leetcode.cn/problems/car-pooling/description/">拼车</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
