<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/05/18/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    <url>/2024/05/18/%E5%89%8D%E7%BC%80%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<table><tbody><tr class="odd"><td>title： 前缀和</td></tr><tr class="even"><td>date： 2024-05-20</td></tr><tr class="odd"><td>tags：</td></tr><tr class="even"><td>- 数据结构</td></tr><tr class="odd"><td>categories：</td></tr><tr class="even"><td>- 数据结构</td></tr></tbody></table><h2 id="前缀和">前缀和</h2><h3 id="什么是前缀和">什么是前缀和</h3><p>前缀和是一种重要的预处理方法，能够极大降低查询的时间复杂度。它的基本思想是将一个数组的各个部分的和预先求出，保存在另一个数组中。</p><h4 id="case">case</h4><p>具体来说，假设我们有一个数组<spanclass="math inline">\(arr\)</span>，那么前缀和数组prefixSum将会被定义为：<spanclass="math inline">\(prefixSum[i] = arr[0] + arr[1] + arr[2] + ... +arr[i]\)</span>。也就是说，前缀和数组的每个元素，都是原数组中从第0个元素加到当前位置的元素之和。例如，如果原数组为<span class="math inline">\([1, 2, 3, 4,5]\)</span>，对应的前缀和数组就是<span class="math inline">\([1, 2, 3,4, 5]\)</span>。</p><p><strong>构造前缀和数组公式</strong> <span class="math display">\[\begin{equation}\text{prefixSum}[i] = \sum_{j=0}^{i} \text{arr}[j]\tag{1.1}\end{equation}\]</span></p><p><strong>求l到r区间和公式</strong> <span class="math display">\[\begin{equation}\sum_{l,r} =\begin{cases}\text{prefixSum}[r], &amp; \text{if } l = 0 \ \text{and} \ r = 0, \\\text{prefixSum}[r] - \text{prefixSum}[l - 1], &amp; \text{if } 0 &lt; l\leq r.\end{cases}\tag{1.2}\end{equation}\]</span></p><h4 id="优势">优势</h4><p>前缀和的主要作用是用于处理数组中不改变原数组的情况下区间和的问题，即快速求出数组中某个区间内的所有数之和。利用前缀和，我们可以将这个问题的时间复杂度从<spanclass="math inline">\(O(n)\)</span>降低到<spanclass="math inline">\(O(1)\)</span>。具体做法是：假设我们要求<spanclass="math inline">\([l,r]\)</span>区间的和，那么只需要一次减法运算：<spanclass="math inline">\(prefixSum[r] - prefixSum[l - 1]\)</span> 其中<spanclass="math inline">\((l &gt; 0)\)</span>就可以得到结果。如果<spanclass="math inline">\(l = 0\)</span>，则区间和就是<spanclass="math inline">\(prefixSum[r]\)</span>。</p><h4 id="优化思路">优化思路</h4><p>不考虑边界情况,如果原数组为<span class="math inline">\([1, 2, 3, 4,5]\)</span>，对应的前缀和数组就是<span class="math inline">\([0, 1, 2,3, 4, 5]\)</span>。对应公式为： <span class="math display">\[\begin{equation}\text{prefixSum}[i] = \sum_{j=0}^{i} \text{arr}[j]\tag{2.1}\end{equation}\]</span></p><p><span class="math display">\[\begin{equation}\sum_{l, r} = \text{prefixSum}[r + 1] - \text{prefixSum}[l], \text{ for} 0 &lt; l \leq r.\tag{2.2}\end{equation}\]</span></p><h3 id="实战">实战</h3><p><ahref="https://leetcode.cn/problems/range-sum-query-immutable/description/">区域和</a></p><p><ahref="https://leetcode.cn/problems/range-sum-query-2d-immutable">二维区域和</a></p><p><ahref="https://labuladong.online/algo/data-structure/prefix-sum/#%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E5%89%8D%E7%BC%80%E5%92%8C">题解</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/05/18/%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84/"/>
    <url>/2024/05/18/%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h2 id="差分数组">差分数组</h2><h3 id="什么是差分数组">什么是差分数组</h3><p>差分数组是一种有效记录数组连续部分和变化的数据结构。 对于给定的数组<span class="math inline">\(a[0], a[1], ... ,a[n]\)</span>，我们定义差分数组 <spanclass="math inline">\(diff\)</span> 为 <spanclass="math inline">\(diff[i] = a[i] - a[i - 1]\)</span>，其中 <spanclass="math inline">\(i\)</span> 从<spanclass="math inline">\(1\)</span> 至 <spanclass="math inline">\(n\)</span>，特殊地，<spanclass="math inline">\(diff[0] = a[0]\)</span>。</p><p>例如，给定数组 <span class="math inline">\([1, 2, 4, 7,8]\)</span>，它的差分数组就是 <span class="math inline">\([1, 1, 2, 3,1]\)</span></p><h3 id="应用">应用</h3><p>差分数组还有很多其他的应用，例如在处理一些区间修改的问题上，比如线段树，树状数组等，差分思想相比于它们来说更加直观，实现起来也更简单。</p><h3 id="case">case</h3><p>当我们要对原数组的一个连续的区间 <span class="math inline">\([l,r]\)</span> 内的所有元素进行加法或者减法操作时，只需要对对应的差分数组<span class="math inline">\([l, r]\)</span>做三次操作，而不需要遍历整个区间。步骤如下： 1. 如果我们需要对区间 <spanclass="math inline">\([l, r]\)</span> 的元素全部加上 <spanclass="math inline">\(k\)</span>，<span class="math inline">\(diff[l] +=k\)</span>，如果<span class="math inline">\(r + 1 &lt; n + 1\)</span> 则<span class="math inline">\(diff[r + 1] -= k\)</span> 。 2. 如果r &lt;a.length - 1, 我们需要对diff[r + 1] -= k 3.然后，获取更新后的原数组，可以通过 <spanclass="math inline">\(diff\)</span> 数组的前缀和恢复出 <spanclass="math inline">\(m\)</span> 数组。公式是 <spanclass="math inline">\(a[i] = diff[1] + diff[2] + ... + diff[i]\)</span>，其中 <span class="math inline">\(1 &lt;= i &lt;= n\)</span>，<spanclass="math inline">\(a[0] = diff[0]\)</span>。</p><h3 id="公式">公式</h3><h4 id="构造diff">构造diff</h4><p><span class="math display">\[\begin{align*}\text{diff}[i] =    \begin{cases}        a[0], &amp; \quad i=0 \\        \text{diff}[i] = a[i] - a[i - 1], &amp; \quad 0 &lt; i &lt;\text{a.length}    \end{cases}\tag{1.1}\end{align*}\]</span></p><h4 id="区间l到r增加k">区间l到r增加k</h4><p><span class="math display">\[\begin{align*}  \text{diff}[l] &amp; += k, \quad  0 \leq k &lt; \text{diff.length} \\  \text{diff}[r + 1] &amp; -= k, \quad \text{if}\quad r + 1 &lt;\text{diff.length}\tag{1.2}  \end{align*}\]</span></p><h4 id="还原diff">还原diff</h4><p><span class="math display">\[\begin{equation}a[i] =\begin{cases}    0, &amp; \text{if}\ \ i = 0,\ \\    a[i - 1] + diff[i], \  \ &amp;\text{for}\ 1 \leq i \leq n\end{cases}\tag{1.3}\end{equation}\]</span></p><h3 id="模板">模板</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Difference</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span>[] diff;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Difference</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        diff = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[nums.length];<br><br>        diff[<span class="hljs-number">0</span>] = nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; nums.length; i++) &#123;<br>            diff[i] = nums[i] - nums[i - <span class="hljs-number">1</span>];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">increment</span><span class="hljs-params">(<span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right, <span class="hljs-type">int</span> val)</span> &#123;<br>        diff[left] += val;<br>        <span class="hljs-keyword">if</span> (right + <span class="hljs-number">1</span> &lt; diff.length) &#123;<br>            diff[right + <span class="hljs-number">1</span>] -= val;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] getRes() &#123;<br>        <span class="hljs-type">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[diff.length];<br>        res[<span class="hljs-number">0</span>] = diff[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; diff.length; i++) &#123;<br>            res[i] = res[i - <span class="hljs-number">1</span>] + diff[i];<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="实战">实战</h3><p><ahref="https://leetcode.cn/problems/corporate-flight-bookings/description/">航班预定</a></p><p><ahref="https://leetcode.cn/problems/car-pooling/description/">拼车</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
